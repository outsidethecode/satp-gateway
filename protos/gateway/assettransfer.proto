syntax = "proto3";
package gateway.assettransfer;

option go_package = "satp/gateway";

import "common/ack.proto";
import "google/api/annotations.proto";

// definitions of all messages used in the gateway
service AssetTransfer {
  // the requesting gateway sends an TransferInitiationRequest request to the remote gateway 
  rpc TransferInitiationRequest(InitializationRequest) returns (common.ack.Ack) {
    option (google.api.http) = { post: "/initiateTransfer" };
  }

  // the remote gateway sends an TransferInitiationResponse request to the requesting gateway 
  rpc TransferInitiationResponse(InitializationResponse) returns (common.ack.Ack) {
    option (google.api.http) = { post: "/initiateResponse" };
  }
  
  // the remote gateway sends an TransferInitiationDenied request to the requesting gateway 
  rpc TransferInitiationDenied(InitializationDenied) returns (common.ack.Ack) {
    option (google.api.http) = { post: "/initiateDeny" };
  }
}

message InitializationRequest {
  string version = 1; 
  string message_type = 2;
  string session_id = 3;
  string transfer_context_id = 4;
}

message InitializationResponse {
  string version = 1; 
  string message_type = 2;
  string session_id = 3;
  string transfer_context_id = 4;
  string hash_transfer_init_claims = 5;
  string timestamp = 6;
}

message InitializationDenied {
  string reason = 1; 
}

message TransferInitializationClaim {
  string asset_asset_id = 1;
  string asset_profile_id = 2;
  string verified_originator_entity_id = 3;
  string verified_beneficiary_entity_id = 4;
  string originator_pubkey = 5;
  string beneficiary_pubkey = 6;
  string sender_gateway_network_id = 7;
  string recipient_gateway_network_id = 8;
  string client_identity_pubkey = 9;
  string server_identity_pubkey = 10;
  string sender_gateway_owner_id = 11;
  string receiver_gateway_owner_id = 12;
}
